{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","words","setWords","results","setResults","Container","maxWidth","style","marginTop","Box","my","Typography","variant","marginBottom","TextField","label","fullWidth","onChange","e","target","value","Button","color","onClick","wordsArray","split","length","finalResult","forEach","element","push","trim","tw","Paper","elevation","padding","map","res","renderResult","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAiEeA,MA9Df,WAAiB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,KAwCd,OACE,eAACC,EAAA,EAAD,CAAWC,SAAS,KAAKC,MAAO,CAAEC,UAAW,MAA7C,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,MAAO,CAAEM,aAAc,OAAhD,sDAGA,cAACC,EAAA,EAAD,CACEP,MAAO,CAAEM,aAAc,QACvBE,MAAM,+BACNH,QAAQ,WACRI,WAAS,EACTC,SAAU,SAACC,GAAD,OAAOhB,EAASgB,EAAEC,OAAOC,UAErC,cAACC,EAAA,EAAD,CAAQT,QAAQ,YAAYU,MAAM,UAAUC,QAhDvB,WACzB,IAAMC,EAAavB,EAAMwB,MAAM,KAC/BrB,EAAWoB,IA8CP,8BA3Ce,SAACA,GACpB,GAAIA,EAAWE,OAAS,EAAG,CACzB,IAAMC,EAAc,GAQpB,OAPAH,EAAWI,SAAQ,SAAAC,GACjBF,EAAYG,KAAKD,EAAQE,QACzBJ,EAAYC,SAAQ,SAAAI,GACdA,EAAGD,SAAWF,EAAQE,QAAUJ,EAAYG,KAAZ,UAAoBE,EAAGD,OAAvB,aAAkCF,EAAQE,eAKhF,cAACtB,EAAA,EAAD,UACE,eAACwB,EAAA,EAAD,CAAOC,UAAW,EAAG3B,MAAO,CAAE4B,QAAS,MAAvC,UACE,cAACxB,EAAA,EAAD,CAAYC,QAAQ,KAAKL,MAAO,CAAEM,aAAc,OAAhD,qBAGA,uBACA,6BACGc,EAAYS,KAAI,SAAAC,GACf,OACE,6BAAeA,GAANA,cA2BpBC,CAAanC,OChDLoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bed741a1.chunk.js","sourcesContent":["import { Box, Button, Container, Paper, TextField, Typography } from '@material-ui/core'\nimport { useState } from 'react'\n\nfunction App () {\n  const [words, setWords] = useState('')\n  const [results, setResults] = useState([])\n  // const [result, setResult] = useState('')\n\n  const handleProcessWords = () => {\n    const wordsArray = words.split(',')\n    setResults(wordsArray)\n  }\n\n  const renderResult = (wordsArray) => {\n    if (wordsArray.length > 0) {\n      const finalResult = []\n      wordsArray.forEach(element => {\n        finalResult.push(element.trim())\n        finalResult.forEach(tw => {\n          if (tw.trim() !== element.trim()) { finalResult.push(`${tw.trim()}, ${element.trim()}`) }\n        })\n      })\n\n      return (\n        <Box>\n          <Paper elevation={3} style={{ padding: '2%' }}>\n            <Typography variant='h5' style={{ marginBottom: '8px' }}>\n              Results\n            </Typography>\n            <hr />\n            <ul>\n              {finalResult.map(res => {\n                return (\n                  <li key={res}>{res}</li>\n                )\n              })}\n            </ul>\n          </Paper>\n        </Box>\n      )\n    }\n  }\n\n  return (\n    <Container maxWidth='md' style={{ marginTop: '2%' }}>\n      <Box my={5}>\n        <Typography variant='h5' style={{ marginBottom: '8px' }}>\n          Enter all words separated by comma (\",\")\n        </Typography>\n        <TextField\n          style={{ marginBottom: '10px' }}\n          label='Ex: word1, word2, word3, ...'\n          variant='outlined'\n          fullWidth\n          onChange={(e) => setWords(e.target.value)}\n        />\n        <Button variant='contained' color='primary' onClick={handleProcessWords}>\n          Process Words\n        </Button>\n      </Box>\n      {renderResult(results)}\n    </Container>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}